package org.nodqlmb.kotlincourse.lesson8

fun main () {

    //println(convert(phrase))
    //println(secondConvert(secondPhrase))
    //println(thirdConvert(thirdPhrase))
    //println(fourthConvert(fourthPhrase))
    //println(fifthConvert(fifthPhrase))

//"–≠—Ç–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞ –æ–¥–∏–Ω –¥–µ–Ω—å"
//–ó–∞–º–µ–Ω–∏—Ç–µ "–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ" –Ω–∞ "—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ —Ç–æ—á–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ—Å—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –≤—Ä–µ–º–µ–Ω–∏"
    var phrase = "–≠—Ç–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞ –æ–¥–∏–Ω –¥–µ–Ω—å."
 fun convert(phrase: String): String {
     return when {
         phrase.contains("–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ", true) -> phrase.replace(
             "–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ",
             "—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ —Ç–æ—á–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ—Å—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –≤—Ä–µ–º–µ–Ω–∏"
         )
         else -> ""
     }
 }
//–ï—Å–ª–∏ —Ñ—Ä–∞–∑–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "–Ø –Ω–µ —É–≤–µ—Ä–µ–Ω":
////–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: –î–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ–Ω–µ—Ü —Ñ—Ä–∞–∑—ã ", –Ω–æ –º–æ—è –∏–Ω—Ç—É–∏—Ü–∏—è –≥–æ–≤–æ—Ä–∏—Ç –æ–± –æ–±—Ä–∞—Ç–Ω–æ–º".

var secondPhrase = "–Ø –Ω–µ —É–≤–µ—Ä–µ–Ω –≤ —É—Å–ø–µ—Ö–µ —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"
     fun secondConvert(secondPhrase: String): String{
         return when{
             secondPhrase.startsWith("–Ø –Ω–µ —É–≤–µ—Ä–µ–Ω") ->
                 { "$secondPhrase ... ,–Ω–æ –º–æ—è –∏–Ω—Ç—É–∏—Ü–∏—è –≥–æ–≤–æ—Ä–∏—Ç –æ–± –æ–±—Ä–∞—Ç–Ω–æ–º"}
                    else -> ""
                 }
             }


//–ï—Å–ª–∏ —Ñ—Ä–∞–∑–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–æ "–∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞":
//–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: –ó–∞–º–µ–Ω–∏—Ç–µ "–∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞" –Ω–∞ "–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ".


var thirdPhrase = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"

    fun thirdConvert (thirdPhrase: String): String {
        return thirdPhrase.replace("–∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞", "–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ")
    }


//–ï—Å–ª–∏ —Ñ—Ä–∞–∑–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ "–±–µ–∑ –ø—Ä–æ–±–ª–µ–º":
//–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: –ó–∞–º–µ–Ω–∏—Ç–µ "–±–µ–∑ –ø—Ä–æ–±–ª–µ–º" –Ω–∞ "—Å –ø–∞—Ä–æ–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ –Ω–∞ –ø—É—Ç–∏".

    var fourthPhrase = "–≠—Ç–æ—Ç –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –ø—Ä–æ–±–ª–µ–º"

    fun fourthConvert (fourthPhrase: String): String {
        return when {
            fourthPhrase.endsWith("–±–µ–∑ –ø—Ä–æ–±–ª–µ–º") ->
                fourthPhrase.replace("–±–µ–∑ –ø—Ä–æ–±–ª–µ–º", "—Å –ø–∞—Ä–æ–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ –Ω–∞ –ø—É—Ç–∏")
            else -> ""
        }
    }

    //–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–¥ —Å–ª–æ–≤–æ–º "–ò–Ω–æ–≥–¥–∞," –∏ –ø–æ—Å–ª–µ —Å–ª–æ–≤–∞ ", –Ω–æ –Ω–µ –≤—Å–µ–≥–¥–∞".

    var fifthPhrase = "–£–¥–∞—á–∞"

    fun fifthConvert (fifthPhrase: String): String {
        return when {
            fifthPhrase.endsWith(" ") -> ""
            else -> "–ò–Ω–æ–≥–¥–∞ $fifthPhrase, –Ω–æ –Ω–µ –≤—Å–µ–≥–¥–∞"
        }
    }
}

//–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –î–∞—Ç—ã –∏–∑ –°—Ç—Ä–æ–∫–∏ –õ–æ–≥–∞. –ò—Å–ø–æ–ª—å–∑—É–π indexOf –∏–ª–∏ split –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–æ–π —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.
//–û–ø–∏—Å–∞–Ω–∏–µ: –£ –≤–∞—Å –µ—Å—Ç—å —Å—Ç—Ä–æ–∫–∞ –ª–æ–≥–∞ –≤–∏–¥–∞ "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É -> 2021-12-01 09:48:23".
//–ò–∑–≤–ª–µ–∫–∏—Ç–µ –æ—Ç–¥–µ–ª—å–Ω–æ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∏–∑ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –∏ —Å—Ä–∞–∑—É —Ä–∞—Å–ø–µ—á–∞—Ç–∞–π –∏—Ö –ø–æ –æ—á–µ—Ä–µ–¥–∏.

fun dateTime () {
    val log = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É -> 2021-12-01 09:48:23"
    val data = log.split(" ")
    val date = data[5]
    val time = data[6]

    println(date)
    println(time)

}
//–ú–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ –õ–∏—á–Ω—ã—Ö –î–∞–Ω–Ω—ã—Ö
////–û–ø–∏—Å–∞–Ω–∏–µ: –î–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã "4539 1488 0343 6467".
//// –ó–∞–º–∞—Å–∫–∏—Ä—É–π—Ç–µ –≤—Å–µ —Ü–∏—Ñ—Ä—ã, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —á–µ—Ç—ã—Ä–µ—Ö, —Å–∏–º–≤–æ–ª–∞–º–∏ "*".

fun creditCard(number: String) {
    val splitNumber = number.split(" ")
    return println("**** **** **** ${splitNumber[3]}")
}

//–ó–∞–¥–∞–Ω–∏–µ 3: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ê–¥—Ä–µ—Å–∞ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ü–æ—á—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π replace
//–û–ø–∏—Å–∞–Ω–∏–µ: –£ –≤–∞—Å –µ—Å—Ç—å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å "username@example.com". –ü—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ –µ–≥–æ –≤ —Å—Ç—Ä–æ–∫—É "username [at] example [dot] com".

fun Email (email: String) {

        val newEmail = email.replace("@", " [at] ")
            email.replace(".", " [dot] ")
        return println(newEmail)
}

//–ó–∞–¥–∞–Ω–∏–µ 4: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ò–º–µ–Ω–∏ –§–∞–π–ª–∞ –∏–∑ –ü—É—Ç–∏
//–û–ø–∏—Å–∞–Ω–∏–µ: –î–∞–Ω –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É "C:/–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏/–î–æ–∫—É–º–µ–Ω—Ç—ã/report.txt". –ò–∑–≤–ª–µ–∫–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º.

fun filePath(path: String){
    val splitPath = path.split("/")
    return println(splitPath.last())

//–ó–∞–¥–∞–Ω–∏–µ 5: –°–æ–∑–¥–∞–Ω–∏–µ –ê–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—ã –∏–∑ –§—Ä–∞–∑—ã. –ò—Å–ø–æ–ª—å–∑—É–π split —Å –Ω–∞–±–æ—Ä–æ–º —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è.
// –ò—Å–ø–æ–ª—å–∑—É–π for –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä–∞ —Å–ª–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π var –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –ø–µ—Ä–≤—ã—Ö –±—É–∫–≤.


    //fun abbreviation(phrase1: String): String {
        //val abbreviationList = phrase1.split(' ', '-')
        //var abbrPhrase = ""

    //üò§üò§üò§

}
